// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

import 'package:ffi/ffi.dart';

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<OnnxApi> getApi() {
    return _getApi();
  }

  late final _getApiPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OnnxApi> Function()>>('getApi');
  late final _getApi = _getApiPtr.asFunction<ffi.Pointer<OnnxApi> Function()>();

  ffi.Pointer<OnnxSession> createSession(
    ffi.Pointer<OnnxApi> api,
    ffi.Pointer<ffi.WChar> model_path,
  ) {
    return _createSession(
      api,
      model_path,
    );
  }

  late final _createSessionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OnnxSession> Function(
              ffi.Pointer<OnnxApi>, ffi.Pointer<ffi.WChar>)>>('createSession');
  late final _createSession = _createSessionPtr.asFunction<
      ffi.Pointer<OnnxSession> Function(
          ffi.Pointer<OnnxApi>, ffi.Pointer<ffi.WChar>)>();
}

class OnnxApi extends ffi.Struct {
  external ffi.Pointer<ffi.Char> version;

  external ffi.Pointer<ffi.Int> _internal;
}

class OnnxSession extends ffi.Struct {
  @ffi.Size()
  external int input_size;

  @ffi.Size()
  external int output_size;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> input_names;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> output_names;
}
